name: CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: stable
    - run: cargo fmt --all -- --check

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable, windows, macos, beta, nightly, ubuntu-16.04, ubuntu-20.04, macos-10.15, windows-2016]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: beta
            os: ubuntu-latest
            rust: beta
          - build: nightly
            os: ubuntu-latest
            rust: nightly
          - build: ubuntu-16.04
            os: ubuntu-16.04
            rust: stable
          - build: ubuntu-20.04
            os: ubuntu-20.04
            rust: stable
          - build: macos-10.15
            os: macos-10.15
            rust: stable
          - build: windows-2016
            os: windows-2016
            rust: stable

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - run: cargo build --workspace --features=fs_utf8 --release -vv

  build_windows_nightly:
    name: Build Windows with Rust nightly
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [windows]
        include:
          - build: windows
            os: windows-latest
            rust: nightly

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - run: cargo build --workspace --features=fs_utf8,nightly --release -vv

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [stable, windows, macos, beta, nightly]
        include:
          - build: stable
            os: ubuntu-latest
            rust: stable
          - build: windows
            os: windows-latest
            rust: stable
          - build: macos
            os: macos-latest
            rust: stable
          - build: beta
            os: ubuntu-latest
            rust: beta
          - build: nightly
            os: ubuntu-latest
            rust: nightly

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - run: cargo test --no-default-features --features fs_utf8 --workspace

  test_windows_nightly:
    name: Test Windows with Rust nightly
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [windows]
        include:
          - build: windows
            os: windows-latest
            rust: nightly

    steps:
    - uses: actions/checkout@v1
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: ${{ matrix.rust }}
    - run: cargo test --no-default-features --features fs_utf8,nightly --workspace

  fuzz_targets:
    name: Fuzz Targets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
    - uses: ./.github/actions/install-rust
      with:
        toolchain: nightly
    - run: cargo install cargo-fuzz --vers "^0.8"
    - run: cargo fetch
      working-directory: ./fuzz
    - run: cargo fuzz build --dev
